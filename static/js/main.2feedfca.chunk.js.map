{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","intialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","handleClick","a","currentActions","console","log","Boolean","newTodos","completed","lowerQuery","toLowerCase","trim","title","includes","length","className","map","id","userId","cn","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","TodoModal","useState","user","setUser","userFromServer","responce","Error","useEffect","currentTodoActions","href","email","name","App","todosFromSerever","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2feedfca.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import {\n  Actions,\n  FilterState,\n  QueryAction,\n} from '../types/Status';\n\nconst intialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst setQuery = (query: string): QueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst clearQuery = () => ({\n  type: 'filter/CLEAR_QUERY',\n});\n\nconst setStatus = (status: string) => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = {\n  setQuery,\n  clearQuery,\n  setStatus,\n};\n\nconst filterReducer = (state = intialState, action: Actions): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import {\n  Actions as TodoActions,\n  FetchAction,\n  Todo,\n} from '../types/Todo';\n\nconst fetchTodos = (todos: Todo[]): FetchAction => ({\n  type: 'todos/FETCH_TODOS',\n  payload: todos,\n});\n\nexport const actions = {\n  fetchTodos,\n};\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: TodoActions,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/FETCH_TODOS':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const handleClick = async (todo: Todo) => {\n    dispatch(currentActions.setTodo(todo));\n  };\n\n  // eslint-disable-next-line no-console\n  console.log(Boolean(currentTodo));\n\n  const newTodos = todos.filter(({ completed }) => {\n    switch (status) {\n      case 'active':\n        return !completed;\n\n      case 'completed':\n        return completed;\n\n      case 'all':\n        return true;\n\n      default:\n        return false;\n    }\n  }).filter((todo) => {\n    if (!query) {\n      return todo;\n    }\n\n    const lowerQuery = query.toLowerCase().trim();\n    const lowerTitle = todo.title.toLowerCase();\n\n    return lowerTitle.includes(lowerQuery);\n  });\n\n  return (\n    <>\n      {newTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {newTodos.map(({\n              id,\n              title,\n              completed,\n              userId,\n            }) => (\n              <tr\n                data-cy=\"todo\"\n                className={cn(\n                  { 'has-backgound-info-light': currentTodo?.id === id },\n                )}\n                key={id}\n              >\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {\n                    completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )\n                  }\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n\n                  <p className={cn(\n                    { 'has-text-danger': !completed },\n                    { 'has-text-success': completed },\n                  )}\n                  >\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleClick({\n                      id,\n                      title,\n                      completed,\n                      userId,\n                    })}\n                  >\n                    <span className=\"icon\">\n                      <i className={cn(\n                        'far',\n                        { 'fa-eye': currentTodo?.id !== id },\n                        { 'fa-eye-slash': currentTodo?.id === id },\n                      )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n// import { actions as TodoActions } from '../../features/todos';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleStatus = (\n    event: ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(filterActions.setStatus(event.target.value));\n  };\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.clearQuery())}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const {\n    id,\n    userId,\n    completed,\n    title,\n  } = currentTodo || {};\n\n  const userFromServer = async () => {\n    if (!userId) {\n      return;\n    }\n\n    try {\n      const responce = await getUser(userId);\n\n      setUser(responce);\n    } catch (error) {\n      throw new Error(error as string);\n    }\n  };\n\n  useEffect(() => {\n    userFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user ? <Loader /> : (\n\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n              {' by '}\n              {user && <a href={`mailto:${user.email}`}>{user.name}</a>}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { Loader } from './components/Loader';\nimport { actions as todoActions } from './features/todos';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const todosFromSerever = async () => {\n    const responce = await getTodos();\n\n    dispatch(todoActions.fetchTodos(responce));\n  };\n\n  useEffect(() => {\n    todosFromSerever();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0 ? <TodoList /> : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}